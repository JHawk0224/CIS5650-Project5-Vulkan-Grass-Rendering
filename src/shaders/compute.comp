#version 450
#extension GL_ARB_separate_shader_objects : enable

#define COMPUTE_FORCES 1

#define GRAVITY_DIRECTION vec3(0.0, -1.0, 0.0)
#define GRAVITY_MAGNITUDE 9.81

#define BLADE_MASS 1.0
#define COLLISION_STRENGTH 0.0

#define WIND_TYPE 1
#define WIND_MAGNITUDE 3.0
#define WIND_FREQUENCY 0.75

#define ENABLE_ORIENTATION_CULLING 1
#define ENABLE_FRUSTRUM_CULLING 1
#define ENABLE_DISTANCE_CULLING 1

#define ORIENTATION_CULLING_THRESHOLD 0.9
#define FRUSTRUM_CULLING_PADDING 0.1
#define DISTANCE_CULLING_THRESHOLD 50.0
#define DISTANCE_CULLING_NUM_BUCKETS 10

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer GrassBlades {
    Blade blades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// 3. Write the total number of blades remaining
// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inViewFrustrum(vec3 pos) {
    vec4 clipPos = camera.proj * camera.view * vec4(pos, 1.0);
    clipPos /= clipPos.w;
    float bounds = 1.0 + FRUSTRUM_CULLING_PADDING;
    return inBounds(clipPos.x, bounds) && inBounds(clipPos.y, bounds) && inBounds(clipPos.z, bounds);
}

vec3 getRandomWind(vec3 pos, float time) {
    float x = sin(WIND_FREQUENCY * pos.x + time) * cos(WIND_FREQUENCY * pos.z - time);
    float y = cos(WIND_FREQUENCY * pos.y + time * 0.52345) * 0.1; // minor vertical wind
    float z = sin(WIND_FREQUENCY * pos.z * 32052.119 + time * 0.73267) * cos(WIND_FREQUENCY * pos.z * 1923.14 - time * 0.91932);
    
    return WIND_MAGNITUDE * vec3(x, y, z);
}

vec3 getUniformWind(vec3 pos, float time) {
    float phase = WIND_FREQUENCY * sin(12452.1249 * pos.x + 9724.88 * pos.z) * (pos.x + pos.z) / 5 + time * 2;
    float magnitude = WIND_MAGNITUDE * ((1 + sin(time * 1.4)) / 3 + 0.8);
    float x = sin(phase) * magnitude * 1.6;
    float y = 0.0; // no vertical wind
    float z = cos(phase) * magnitude * 1.1;
    
    return vec3(x, y, z);
}

vec3 getRadialWind(vec3 pos, float time) {
    vec3 center = vec3(0.0);
    vec3 direction = normalize(pos - center);
    float dist = length(pos - center);
    float wave = 2.5 * sin(WIND_FREQUENCY * dist - time * 10);
    
    return WIND_MAGNITUDE * direction * wave;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currBlade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = currBlade.v0.xyz;
    vec3 v1 = currBlade.v1.xyz;
    vec3 v2 = currBlade.v2.xyz;
    vec3 up = currBlade.up.xyz;

    float orientation = currBlade.v0.w;
    float height = currBlade.v1.w;
    float width = currBlade.v2.w;
    float stiffness = currBlade.up.w;

    vec3 t1 = vec3(-cos(orientation), 0.0, -sin(orientation)); // bitangent
    vec3 f = normalize(cross(t1, up)); // normal (of grass blade)

#if COMPUTE_FORCES
    // TODO: Apply forces on every blade and update the vertices in the buffer
    // Compute Recovery force
    vec3 Iv2 = v0 + height * up;
    vec3 r = (Iv2 - v2) * stiffness * max(1 - COLLISION_STRENGTH, 0.1);

    // Compute Gravity force
    vec3 D = GRAVITY_DIRECTION;
    float Dw = GRAVITY_MAGNITUDE;
    vec3 gE = BLADE_MASS * (normalize(D) * Dw);
    vec3 gF = 0.25 * length(gE) * f;
    vec3 g = gE + gF;

    // Compute Wind force
#if WIND_TYPE == 0
    vec3 w_v0 = getRandomWind(v0, totalTime);
#elif WIND_TYPE == 1
    vec3 w_v0 = getUniformWind(v0, totalTime);
#elif WIND_TYPE == 2
    vec3 w_v0 = getRadialWind(v0, totalTime);
#endif
    float fd = 1 - abs(dot(normalize(w_v0), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / height;
    float theta = fd * fr;
    vec3 w = w_v0 * theta;

    // Compute total force
    vec3 force = (r + g + w) * deltaTime;
    v2 += force;

    // State validation
    // 1. v2 not below the ground
    v2 -= up * min(dot(up, v2 - v0), 0);

    // 2. v1 set according to v2
    float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - l_proj / height, 0.05 * max(l_proj / height, 1));

    // 3. length of curve equals height of blade
    float L0 = distance(v0, v2);
    float L1 = distance(v0, v1) + distance(v1, v2);
    float L = (2.0 * L0 + L1) / 3.0;
    float scale = height / L; // r

    vec3 original_v1 = v1;
    v1 = v0 + scale * (v1 - v0);
    v2 = v1 + scale * (v2 - original_v1);

    currBlade.v1.xyz = v1;
    currBlade.v2.xyz = v2;
    blades[gl_GlobalInvocationID.x] = currBlade;
#endif

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    vec3 c = vec3(inverse(camera.view)[3]);
    vec3 dir_c = v0 - c - up * dot(v0 - c, up);
#if ENABLE_ORIENTATION_CULLING
    // Orientation culling
    if (abs(dot(normalize(dir_c), t1)) > ORIENTATION_CULLING_THRESHOLD) {
        return;
    }
#endif

#if ENABLE_FRUSTRUM_CULLING
    // View-Frustrum culling
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    if (!inViewFrustrum(m) && !inViewFrustrum(v0) && !inViewFrustrum(v2)) {
        return;
    }
#endif

#if ENABLE_DISTANCE_CULLING
    // Distance culling
    float d_proj = length(dir_c);
    int n = DISTANCE_CULLING_NUM_BUCKETS;
    if (gl_GlobalInvocationID.x % n >= floor(n * (1.0 - d_proj / DISTANCE_CULLING_THRESHOLD))) {
        return;
    }
#endif

    culledBlades[(atomicAdd(numBlades.vertexCount, 1))] = blades[gl_GlobalInvocationID.x];
}
